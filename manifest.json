{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n...\nTime: 0.038\n\nOK (3 tests)\n\n","instructions":"Write a program to generate all potential \nanagrams of an input string.\n\nFor example, the potential anagrams of \"biro\" are\n\nbiro bior brio broi boir bori\nibro ibor irbo irob iobr iorb\nrbio rboi ribo riob roib robi\nobir obri oibr oirb orbi orib\n","AnagramTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class AnagramTest {\n\n    @Test\n    public void the_anagram_of_a_one_letter_word_should_be_itself() {\n        assertThat(Anagrams.of(\"a\"), is(Arrays.asList(\"a\")));\n    }\n\n    @Test\n    public void the_anagram_of_a_two_letter_word_should_be_two_words() {\n        assertThat(Anagrams.of(\"ab\"), is(Arrays.asList(\"ab\", \"ba\")));\n    }\n\n    @Test\n    public void the_anagram_of_a_three_letter_word_should_be_six_words() {\n        assertThat(Anagrams.of(\"abc\"), is(Arrays.asList(\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\")));\n    }\n}\n","Anagrams.java":"import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Anagrams {\n    public static List<String> of(String s) {\n        if (s.length() == 1) {\n            return Arrays.asList(s);\n        }\n        if (s.length() == 2) {\n            return Arrays.asList(s, \n                                 s.substring(1) + s.substring(0, 1));\n        }\n        return Arrays.asList(s.substring(0, 1) + Anagrams.of(dropCharacter(s, 0)).get(0), \n                             s.substring(0, 1) + Anagrams.of(dropCharacter(s, 0)).get(1), \n                             s.substring(1, 2) + Anagrams.of(dropCharacter(s, 1)).get(0), \n                             s.substring(1, 2) + Anagrams.of(dropCharacter(s, 1)).get(1), \n                             s.substring(2) + Anagrams.of(dropCharacter(s, 2)).get(0), \n                             s.substring(2) + Anagrams.of(dropCharacter(s, 2)).get(1)\n                             );\n    }\n\n    private static String dropCharacter(String s, int index) {\n        if (index == 0) {\n            return s.substring(1);\n        }\n        if (index == 1) {\n            return s.substring(0, 1) + s.substring(2);\n        }\n        return s.substring(0,2);\n    }\n}\n"}